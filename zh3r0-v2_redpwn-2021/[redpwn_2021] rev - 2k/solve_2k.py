from z3 import *
from pwn import *

inp = [BitVec('inp_%d'%i, 16) for i in range(0, 64)]
s = Solver()
for i in range(0, 64):
    s.add(inp[i] >= 1)
    s.add(inp[i] <= 17)         #dòng này cx tìm ra được input thỏa, mà lại nhanh hơn nữa
                                    #- 0x2f vì input đầu vào binary sẽ bị trừ đi 0x2f rồi mới đc tính toán
    #s.add(inp[i] <= 90 - 0x2f)     #dòng này giả sử rằng input chỉ nằm trong đoạn [0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ] mà thôi
                                    #làm như vậy vừa có thể tìm ra input nhanh hơn, vừa không phát sinh trường hợp đặc biệt
                                    #do thêm các kí tự đặc biệt vào, mình mở rộng đến 126 - 0x2f thì bị sai
s.add((((inp[23] * inp[15] %0x7fff) * inp[7]) %0x7fff) == 15)
s.add((((inp[10] * inp[9] %0x7fff) * inp[1]) %0x7fff) == 8)
s.add((((inp[27] * inp[26] %0x7fff) * inp[18]) %0x7fff) == 144)
s.add(((((inp[45] * inp[37] %0x7fff) * inp[36]) %0x7fff)*inp[35] %0x7fff) == 30)

s.add(inp[14] + inp[22] == 12)
s.add(inp[4] + inp[5]  +inp[6]== 17)
s.add(inp[12] + inp[20]  +inp[28]== 7)
s.add(inp[2] + inp[3] == 12)
s.add(inp[48] + inp[57]  +inp[49]== 12)
s.add(inp[33] + inp[41] == 12)
s.add(inp[43] + inp[51]  +inp[59]== 15)

s.add(inp[58] == 5)
s.add(inp[56] == 2)
s.add(inp[44] == 3)
s.add(inp[40] == 7)
s.add(inp[34] == 4)
s.add(inp[32] == 1)
s.add(inp[25] == 3)
s.add(inp[24] == 5)
s.add(inp[19] == 1)
s.add(inp[13] == 8)
s.add(inp[11] == 7)
s.add((inp[8] - inp[0]) == 2 or (inp[0] - inp[8]) == 2 )
s.add((inp[29] - inp[21]) == 5 or (inp[21] - inp[29]) == 5)
s.add((inp[17] - inp[16]) == 2 or (inp[16] - inp[17]) == 2  )
s.add((inp[61] - inp[60]) == 2 or (inp[60] - inp[61]) == 2 )
s.add((inp[53] - inp[52]) == 2 or (inp[52] - inp[53]) == 2 )
#'''
s.add((inp[62] % inp[63]) * (inp[63] %inp[62]) == 0)
s.add((inp[47] % inp[55]) * (inp[55] %inp[47]) == 0)
s.add((inp[46] % inp[54]) * (inp[54] %inp[46]) == 0)
s.add((inp[42] % inp[50]) * (inp[50] %inp[42]) == 0)
s.add((inp[31] % inp[39]) * (inp[39] %inp[31]) == 0)
s.add((inp[30] % inp[38]) * (inp[38] %inp[30]) == 0)

s.add((inp[30]/inp[38] + inp[38]/inp[30]) / Int2BV(If((inp[38] == inp[30]), 2, 1), 16) == 2)
s.add((inp[31]/inp[39] + inp[39]/inp[31]) / Int2BV(If((inp[39] == inp[31]), 2, 1), 16) == 3)
s.add((inp[50]/inp[42] + inp[42]/inp[50]) / Int2BV(If((inp[50] == inp[42]), 2, 1), 16) == 3)
s.add((inp[46]/inp[54] + inp[54]/inp[46]) / Int2BV(If((inp[46] == inp[54]), 2, 1), 16) == 3)
s.add((inp[55]/inp[47] + inp[47]/inp[55]) / Int2BV(If((inp[55] == inp[47]), 2, 1), 16) == 2)
s.add((inp[63]/inp[62] + inp[62]/inp[63]) / Int2BV(If((inp[63] == inp[62]), 2, 1), 16) == 7)


s.add(inp[0] - inp[1] != 0)
s.add(inp[0] - inp[8] != 0)
s.add(inp[0] - inp[2] != 0)
s.add(inp[0] - inp[16] != 0)
s.add(inp[1] - inp[2] != 0)
s.add(inp[8] - inp[16] != 0)
s.add(inp[0] - inp[3] != 0)
s.add(inp[0] - inp[24] != 0)
s.add(inp[1] - inp[3] != 0)
s.add(inp[8] - inp[24] != 0)
s.add(inp[2] - inp[3] != 0)
s.add(inp[16] - inp[24] != 0)
s.add(inp[0] - inp[4] != 0)
s.add(inp[0] - inp[32] != 0)
s.add(inp[1] - inp[4] != 0)
s.add(inp[8] - inp[32] != 0)
s.add(inp[2] - inp[4] != 0)
s.add(inp[16] - inp[32] != 0)
s.add(inp[3] - inp[4] != 0)
s.add(inp[24] - inp[32] != 0)
s.add(inp[0] - inp[5] != 0)
s.add(inp[0] - inp[40] != 0)
s.add(inp[1] - inp[5] != 0)
s.add(inp[8] - inp[40] != 0)
s.add(inp[2] - inp[5] != 0)
s.add(inp[16] - inp[40] != 0)
s.add(inp[3] - inp[5] != 0)
s.add(inp[24] - inp[40] != 0)
s.add(inp[4] - inp[5] != 0)
s.add(inp[32] - inp[40] != 0)
s.add(inp[0] - inp[6] != 0)
s.add(inp[0] - inp[48] != 0)
s.add(inp[1] - inp[6] != 0)
s.add(inp[8] - inp[48] != 0)
s.add(inp[2] - inp[6] != 0)
s.add(inp[16] - inp[48] != 0)
s.add(inp[3] - inp[6] != 0)
s.add(inp[24] - inp[48] != 0)
s.add(inp[4] - inp[6] != 0)
s.add(inp[32] - inp[48] != 0)
s.add(inp[5] - inp[6] != 0)
s.add(inp[40] - inp[48] != 0)
s.add(inp[0] - inp[7] != 0)
s.add(inp[0] - inp[56] != 0)
s.add(inp[1] - inp[7] != 0)
s.add(inp[8] - inp[56] != 0)
s.add(inp[2] - inp[7] != 0)
s.add(inp[16] - inp[56] != 0)
s.add(inp[3] - inp[7] != 0)
s.add(inp[24] - inp[56] != 0)
s.add(inp[4] - inp[7] != 0)
s.add(inp[32] - inp[56] != 0)
s.add(inp[5] - inp[7] != 0)
s.add(inp[40] - inp[56] != 0)
s.add(inp[6] - inp[7] != 0)
s.add(inp[48] - inp[56] != 0)
s.add(inp[8] - inp[9] != 0)
s.add(inp[1] - inp[9] != 0)
s.add(inp[8] - inp[10] != 0)
s.add(inp[1] - inp[17] != 0)
s.add(inp[9] - inp[10] != 0)
s.add(inp[9] - inp[17] != 0)
s.add(inp[8] - inp[11] != 0)
s.add(inp[1] - inp[25] != 0)
s.add(inp[9] - inp[11] != 0)
s.add(inp[9] - inp[25] != 0)
s.add(inp[10] - inp[11] != 0)
s.add(inp[17] - inp[25] != 0)
s.add(inp[8] - inp[12] != 0)
s.add(inp[1] - inp[33] != 0)
s.add(inp[9] - inp[12] != 0)
s.add(inp[9] - inp[33] != 0)
s.add(inp[10] - inp[12] != 0)
s.add(inp[17] - inp[33] != 0)
s.add(inp[11] - inp[12] != 0)
s.add(inp[25] - inp[33] != 0)
s.add(inp[8] - inp[13] != 0)
s.add(inp[1] - inp[41] != 0)
s.add(inp[9] - inp[13] != 0)
s.add(inp[9] - inp[41] != 0)
s.add(inp[10] - inp[13] != 0)
s.add(inp[17] - inp[41] != 0)
s.add(inp[11] - inp[13] != 0)
s.add(inp[25] - inp[41] != 0)
s.add(inp[12] - inp[13] != 0)
s.add(inp[33] - inp[41] != 0)
s.add(inp[8] - inp[14] != 0)
s.add(inp[1] - inp[49] != 0)
s.add(inp[9] - inp[14] != 0)
s.add(inp[9] - inp[49] != 0)
s.add(inp[10] - inp[14] != 0)
s.add(inp[17] - inp[49] != 0)
s.add(inp[11] - inp[14] != 0)
s.add(inp[25] - inp[49] != 0)
s.add(inp[12] - inp[14] != 0)
s.add(inp[33] - inp[49] != 0)
s.add(inp[13] - inp[14] != 0)
s.add(inp[41] - inp[49] != 0)
s.add(inp[8] - inp[15] != 0)
s.add(inp[1] - inp[57] != 0)
s.add(inp[9] - inp[15] != 0)
s.add(inp[9] - inp[57] != 0)
s.add(inp[10] - inp[15] != 0)
s.add(inp[17] - inp[57] != 0)
s.add(inp[11] - inp[15] != 0)
s.add(inp[25] - inp[57] != 0)
s.add(inp[12] - inp[15] != 0)
s.add(inp[33] - inp[57] != 0)
s.add(inp[13] - inp[15] != 0)
s.add(inp[41] - inp[57] != 0)
s.add(inp[14] - inp[15] != 0)
s.add(inp[49] - inp[57] != 0)
s.add(inp[16] - inp[17] != 0)
s.add(inp[2] - inp[10] != 0)
s.add(inp[16] - inp[18] != 0)
s.add(inp[2] - inp[18] != 0)
s.add(inp[17] - inp[18] != 0)
s.add(inp[10] - inp[18] != 0)
s.add(inp[16] - inp[19] != 0)
s.add(inp[2] - inp[26] != 0)
s.add(inp[17] - inp[19] != 0)
s.add(inp[10] - inp[26] != 0)
s.add(inp[18] - inp[19] != 0)
s.add(inp[18] - inp[26] != 0)
s.add(inp[16] - inp[20] != 0)
s.add(inp[2] - inp[34] != 0)
s.add(inp[17] - inp[20] != 0)
s.add(inp[10] - inp[34] != 0)
s.add(inp[18] - inp[20] != 0)
s.add(inp[18] - inp[34] != 0)
s.add(inp[19] - inp[20] != 0)
s.add(inp[26] - inp[34] != 0)
s.add(inp[16] - inp[21] != 0)
s.add(inp[2] - inp[42] != 0)
s.add(inp[17] - inp[21] != 0)
s.add(inp[10] - inp[42] != 0)
s.add(inp[18] - inp[21] != 0)
s.add(inp[18] - inp[42] != 0)
s.add(inp[19] - inp[21] != 0)
s.add(inp[26] - inp[42] != 0)
s.add(inp[20] - inp[21] != 0)
s.add(inp[34] - inp[42] != 0)
s.add(inp[16] - inp[22] != 0)
s.add(inp[2] - inp[50] != 0)
s.add(inp[17] - inp[22] != 0)
s.add(inp[10] - inp[50] != 0)
s.add(inp[18] - inp[22] != 0)
s.add(inp[18] - inp[50] != 0)
s.add(inp[19] - inp[22] != 0)
s.add(inp[26] - inp[50] != 0)
s.add(inp[20] - inp[22] != 0)
s.add(inp[34] - inp[50] != 0)
s.add(inp[21] - inp[22] != 0)
s.add(inp[42] - inp[50] != 0)
s.add(inp[16] - inp[23] != 0)
s.add(inp[2] - inp[58] != 0)
s.add(inp[17] - inp[23] != 0)
s.add(inp[10] - inp[58] != 0)
s.add(inp[18] - inp[23] != 0)
s.add(inp[18] - inp[58] != 0)
s.add(inp[19] - inp[23] != 0)
s.add(inp[26] - inp[58] != 0)
s.add(inp[20] - inp[23] != 0)
s.add(inp[34] - inp[58] != 0)
s.add(inp[21] - inp[23] != 0)
s.add(inp[42] - inp[58] != 0)
s.add(inp[22] - inp[23] != 0)
s.add(inp[50] - inp[58] != 0)
s.add(inp[24] - inp[25] != 0)
s.add(inp[3] - inp[11] != 0)
s.add(inp[24] - inp[26] != 0)
s.add(inp[3] - inp[19] != 0)
s.add(inp[25] - inp[26] != 0)
s.add(inp[11] - inp[19] != 0)
s.add(inp[24] - inp[27] != 0)
s.add(inp[3] - inp[27] != 0)
s.add(inp[25] - inp[27] != 0)
s.add(inp[11] - inp[27] != 0)
s.add(inp[26] - inp[27] != 0)
s.add(inp[19] - inp[27] != 0)
s.add(inp[24] - inp[28] != 0)
s.add(inp[3] - inp[35] != 0)
s.add(inp[25] - inp[28] != 0)
s.add(inp[11] - inp[35] != 0)
s.add(inp[26] - inp[28] != 0)
s.add(inp[19] - inp[35] != 0)
s.add(inp[27] - inp[28] != 0)
s.add(inp[27] - inp[35] != 0)
s.add(inp[24] - inp[29] != 0)
s.add(inp[3] - inp[43] != 0)
s.add(inp[25] - inp[29] != 0)
s.add(inp[11] - inp[43] != 0)
s.add(inp[26] - inp[29] != 0)
s.add(inp[19] - inp[43] != 0)
s.add(inp[27] - inp[29] != 0)
s.add(inp[27] - inp[43] != 0)
s.add(inp[28] - inp[29] != 0)
s.add(inp[35] - inp[43] != 0)
s.add(inp[24] - inp[30] != 0)
s.add(inp[3] - inp[51] != 0)
s.add(inp[25] - inp[30] != 0)
s.add(inp[11] - inp[51] != 0)
s.add(inp[26] - inp[30] != 0)
s.add(inp[19] - inp[51] != 0)
s.add(inp[27] - inp[30] != 0)
s.add(inp[27] - inp[51] != 0)
s.add(inp[28] - inp[30] != 0)
s.add(inp[35] - inp[51] != 0)
s.add(inp[29] - inp[30] != 0)
s.add(inp[43] - inp[51] != 0)
s.add(inp[24] - inp[31] != 0)
s.add(inp[3] - inp[59] != 0)
s.add(inp[25] - inp[31] != 0)
s.add(inp[11] - inp[59] != 0)
s.add(inp[26] - inp[31] != 0)
s.add(inp[19] - inp[59] != 0)
s.add(inp[27] - inp[31] != 0)
s.add(inp[27] - inp[59] != 0)
s.add(inp[28] - inp[31] != 0)
s.add(inp[35] - inp[59] != 0)
s.add(inp[29] - inp[31] != 0)
s.add(inp[43] - inp[59] != 0)
s.add(inp[30] - inp[31] != 0)
s.add(inp[51] - inp[59] != 0)
s.add(inp[32] - inp[33] != 0)
s.add(inp[4] - inp[12] != 0)
s.add(inp[32] - inp[34] != 0)
s.add(inp[4] - inp[20] != 0)
s.add(inp[33] - inp[34] != 0)
s.add(inp[12] - inp[20] != 0)
s.add(inp[32] - inp[35] != 0)
s.add(inp[4] - inp[28] != 0)
s.add(inp[33] - inp[35] != 0)
s.add(inp[12] - inp[28] != 0)
s.add(inp[34] - inp[35] != 0)
s.add(inp[20] - inp[28] != 0)
s.add(inp[32] - inp[36] != 0)
s.add(inp[4] - inp[36] != 0)
s.add(inp[33] - inp[36] != 0)
s.add(inp[12] - inp[36] != 0)
s.add(inp[34] - inp[36] != 0)
s.add(inp[20] - inp[36] != 0)
s.add(inp[35] - inp[36] != 0)
s.add(inp[28] - inp[36] != 0)
s.add(inp[32] - inp[37] != 0)
s.add(inp[4] - inp[44] != 0)
s.add(inp[33] - inp[37] != 0)
s.add(inp[12] - inp[44] != 0)
s.add(inp[34] - inp[37] != 0)
s.add(inp[20] - inp[44] != 0)
s.add(inp[35] - inp[37] != 0)
s.add(inp[28] - inp[44] != 0)
s.add(inp[36] - inp[37] != 0)
s.add(inp[36] - inp[44] != 0)
s.add(inp[32] - inp[38] != 0)
s.add(inp[4] - inp[52] != 0)
s.add(inp[33] - inp[38] != 0)
s.add(inp[12] - inp[52] != 0)
s.add(inp[34] - inp[38] != 0)
s.add(inp[20] - inp[52] != 0)
s.add(inp[35] - inp[38] != 0)
s.add(inp[28] - inp[52] != 0)
s.add(inp[36] - inp[38] != 0)
s.add(inp[36] - inp[52] != 0)
s.add(inp[37] - inp[38] != 0)
s.add(inp[44] - inp[52] != 0)
s.add(inp[32] - inp[39] != 0)
s.add(inp[4] - inp[60] != 0)
s.add(inp[33] - inp[39] != 0)
s.add(inp[12] - inp[60] != 0)
s.add(inp[34] - inp[39] != 0)
s.add(inp[20] - inp[60] != 0)
s.add(inp[35] - inp[39] != 0)
s.add(inp[28] - inp[60] != 0)
s.add(inp[36] - inp[39] != 0)
s.add(inp[36] - inp[60] != 0)
s.add(inp[37] - inp[39] != 0)
s.add(inp[44] - inp[60] != 0)
s.add(inp[38] - inp[39] != 0)
s.add(inp[52] - inp[60] != 0)
s.add(inp[40] - inp[41] != 0)
s.add(inp[5] - inp[13] != 0)
s.add(inp[40] - inp[42] != 0)
s.add(inp[5] - inp[21] != 0)
s.add(inp[41] - inp[42] != 0)
s.add(inp[13] - inp[21] != 0)
s.add(inp[40] - inp[43] != 0)
s.add(inp[5] - inp[29] != 0)
s.add(inp[41] - inp[43] != 0)
s.add(inp[13] - inp[29] != 0)
s.add(inp[42] - inp[43] != 0)
s.add(inp[21] - inp[29] != 0)
s.add(inp[40] - inp[44] != 0)
s.add(inp[5] - inp[37] != 0)
s.add(inp[41] - inp[44] != 0)
s.add(inp[13] - inp[37] != 0)
s.add(inp[42] - inp[44] != 0)
s.add(inp[21] - inp[37] != 0)
s.add(inp[43] - inp[44] != 0)
s.add(inp[29] - inp[37] != 0)
s.add(inp[40] - inp[45] != 0)
s.add(inp[5] - inp[45] != 0)
s.add(inp[41] - inp[45] != 0)
s.add(inp[13] - inp[45] != 0)
s.add(inp[42] - inp[45] != 0)
s.add(inp[21] - inp[45] != 0)
s.add(inp[43] - inp[45] != 0)
s.add(inp[29] - inp[45] != 0)
s.add(inp[44] - inp[45] != 0)
s.add(inp[37] - inp[45] != 0)
s.add(inp[40] - inp[46] != 0)
s.add(inp[5] - inp[53] != 0)
s.add(inp[41] - inp[46] != 0)
s.add(inp[13] - inp[53] != 0)
s.add(inp[42] - inp[46] != 0)
s.add(inp[21] - inp[53] != 0)
s.add(inp[43] - inp[46] != 0)
s.add(inp[29] - inp[53] != 0)
s.add(inp[44] - inp[46] != 0)
s.add(inp[37] - inp[53] != 0)
s.add(inp[45] - inp[46] != 0)
s.add(inp[45] - inp[53] != 0)
s.add(inp[40] - inp[47] != 0)
s.add(inp[5] - inp[61] != 0)
s.add(inp[41] - inp[47] != 0)
s.add(inp[13] - inp[61] != 0)
s.add(inp[42] - inp[47] != 0)
s.add(inp[21] - inp[61] != 0)
s.add(inp[43] - inp[47] != 0)
s.add(inp[29] - inp[61] != 0)
s.add(inp[44] - inp[47] != 0)
s.add(inp[37] - inp[61] != 0)
s.add(inp[45] - inp[47] != 0)
s.add(inp[45] - inp[61] != 0)
s.add(inp[46] - inp[47] != 0)
s.add(inp[53] - inp[61] != 0)
s.add(inp[48] - inp[49] != 0)
s.add(inp[6] - inp[14] != 0)
s.add(inp[48] - inp[50] != 0)
s.add(inp[6] - inp[22] != 0)
s.add(inp[49] - inp[50] != 0)
s.add(inp[14] - inp[22] != 0)
s.add(inp[48] - inp[51] != 0)
s.add(inp[6] - inp[30] != 0)
s.add(inp[49] - inp[51] != 0)
s.add(inp[14] - inp[30] != 0)
s.add(inp[50] - inp[51] != 0)
s.add(inp[22] - inp[30] != 0)
s.add(inp[48] - inp[52] != 0)
s.add(inp[6] - inp[38] != 0)
s.add(inp[49] - inp[52] != 0)
s.add(inp[14] - inp[38] != 0)
s.add(inp[50] - inp[52] != 0)
s.add(inp[22] - inp[38] != 0)
s.add(inp[51] - inp[52] != 0)
s.add(inp[30] - inp[38] != 0)
s.add(inp[48] - inp[53] != 0)
s.add(inp[6] - inp[46] != 0)
s.add(inp[49] - inp[53] != 0)
s.add(inp[14] - inp[46] != 0)
s.add(inp[50] - inp[53] != 0)
s.add(inp[22] - inp[46] != 0)
s.add(inp[51] - inp[53] != 0)
s.add(inp[30] - inp[46] != 0)
s.add(inp[52] - inp[53] != 0)
s.add(inp[38] - inp[46] != 0)
s.add(inp[48] - inp[54] != 0)
s.add(inp[6] - inp[54] != 0)
s.add(inp[49] - inp[54] != 0)
s.add(inp[14] - inp[54] != 0)
s.add(inp[50] - inp[54] != 0)
s.add(inp[22] - inp[54] != 0)
s.add(inp[51] - inp[54] != 0)
s.add(inp[30] - inp[54] != 0)
s.add(inp[52] - inp[54] != 0)
s.add(inp[38] - inp[54] != 0)
s.add(inp[53] - inp[54] != 0)
s.add(inp[46] - inp[54] != 0)
s.add(inp[48] - inp[55] != 0)
s.add(inp[6] - inp[62] != 0)
s.add(inp[49] - inp[55] != 0)
s.add(inp[14] - inp[62] != 0)
s.add(inp[50] - inp[55] != 0)
s.add(inp[22] - inp[62] != 0)
s.add(inp[51] - inp[55] != 0)
s.add(inp[30] - inp[62] != 0)
s.add(inp[52] - inp[55] != 0)
s.add(inp[38] - inp[62] != 0)
s.add(inp[53] - inp[55] != 0)
s.add(inp[46] - inp[62] != 0)
s.add(inp[54] - inp[55] != 0)
s.add(inp[54] - inp[62] != 0)
s.add(inp[56] - inp[57] != 0)
s.add(inp[7] - inp[15] != 0)
s.add(inp[56] - inp[58] != 0)
s.add(inp[7] - inp[23] != 0)
s.add(inp[57] - inp[58] != 0)
s.add(inp[15] - inp[23] != 0)
s.add(inp[56] - inp[59] != 0)
s.add(inp[7] - inp[31] != 0)
s.add(inp[57] - inp[59] != 0)
s.add(inp[15] - inp[31] != 0)
s.add(inp[58] - inp[59] != 0)
s.add(inp[23] - inp[31] != 0)
s.add(inp[56] - inp[60] != 0)
s.add(inp[7] - inp[39] != 0)
s.add(inp[57] - inp[60] != 0)
s.add(inp[15] - inp[39] != 0)
s.add(inp[58] - inp[60] != 0)
s.add(inp[23] - inp[39] != 0)
s.add(inp[59] - inp[60] != 0)
s.add(inp[31] - inp[39] != 0)
s.add(inp[56] - inp[61] != 0)
s.add(inp[7] - inp[47] != 0)
s.add(inp[57] - inp[61] != 0)
s.add(inp[15] - inp[47] != 0)
s.add(inp[58] - inp[61] != 0)
s.add(inp[23] - inp[47] != 0)
s.add(inp[59] - inp[61] != 0)
s.add(inp[31] - inp[47] != 0)
s.add(inp[60] - inp[61] != 0)
s.add(inp[39] - inp[47] != 0)
s.add(inp[56] - inp[62] != 0)
s.add(inp[7] - inp[55] != 0)
s.add(inp[57] - inp[62] != 0)
s.add(inp[15] - inp[55] != 0)
s.add(inp[58] - inp[62] != 0)
s.add(inp[23] - inp[55] != 0)
s.add(inp[59] - inp[62] != 0)
s.add(inp[31] - inp[55] != 0)
s.add(inp[60] - inp[62] != 0)
s.add(inp[39] - inp[55] != 0)
s.add(inp[61] - inp[62] != 0)
s.add(inp[47] - inp[55] != 0)
s.add(inp[56] - inp[63] != 0)
s.add(inp[7] - inp[63] != 0)
s.add(inp[57] - inp[63] != 0)
s.add(inp[15] - inp[63] != 0)
s.add(inp[58] - inp[63] != 0)
s.add(inp[23] - inp[63] != 0)
s.add(inp[59] - inp[63] != 0)
s.add(inp[31] - inp[63] != 0)
s.add(inp[60] - inp[63] != 0)
s.add(inp[39] - inp[63] != 0)
s.add(inp[61] - inp[63] != 0)
s.add(inp[47] - inp[63] != 0)
s.add(inp[62] - inp[63] != 0)
s.add(inp[55] - inp[63] != 0)
if s.check() == sat:
    model = s.model()
    res = ''.join([chr(int(str(model[inp[i]])) + 0x2f) for i in range(len(inp))])
    print(res)
    p = remote('mc.ax', 31361)
    p.recvuntil('sice deet:\n')
    p.send(res.encode('ascii'))

    isFlag = p.recvuntil('\n')
    if b'flag' in isFlag:
        print(isFlag)
    p.close()
else:
    print('unsat')

